«EXTENSION templates::UMLNaming»
«EXTENSION templates::UMLQueries»
«IMPORT uml»
«IMPORT Persistence»

«DEFINE Root FOR Model»
	«EXPAND Classes FOREACH eAllContents.typeSelect(Class)»
	«EXPAND DAOFactory FOR eAllContents.select(t|Entity.isInstance(t)).flatten()»
«ENDDEFINE»

«DEFINE DAOFactory FOR List[Class]»
	«FILE this.get(0).packageName().toPath()+"/dao/IDAOFactory.java"»
		package «this.get(0).packageName()».dao;
		public interface IDAOFactory {
			String getName();
			String getDescription();
			void setID(long l);
			long getID();
			void finalizeAndClose();
			String getPersistendInfo();
			void reload();
			«FOREACH this AS clazz»
				«clazz.daoiffqn()» create«clazz.name»DAO();
			«ENDFOREACH»
		} 
	«ENDFILE»
«ENDDEFINE»

«DEFINE Classes FOR Class»
	«EXPAND Interface FOR this»
	«EXPAND AbstractClass FOR this»
	«IF !this.isAbstract»
		«EXPAND Implementation FOR this»
	«ENDIF»
	«IF Entity.isInstance(this)»
		«EXPAND DAO FOR this»
	«ENDIF»
«ENDDEFINE»
 
«DEFINE DAO FOR Class»
	«FILE this.daoiffqn().toPath()+".java"»
		package «this.packageName()».dao;
		public interface I«this.name»DAO {
			«FOREACH this.getAllSubtypes().select(c|!c.isAbstract) AS subtype»
				«EXPAND AddCompositeDecl FOR subtype»;
			«ENDFOREACH»

			/* Finder methods to search for «this.name»s */
			«EXPAND FinderDecl(this) FOREACH attribute.select(p|Findable.isInstance(p)) SEPARATOR ";"»;

			«this.iffqn()» get(long id);
			java.util.List<«this.iffqn().ensureObjectType()»> get«this.name.toFirstUpper()»s();
		} 
	«ENDFILE»
«ENDDEFINE»
 
«DEFINE FinderDecl(Class c) FOR Property»
	java.util.List<«c.iffqn().ensureObjectType()»> findBy«this.name.toFirstUpper()»
		(«this.type.typeDecl()» searchKey);
«ENDDEFINE»
 
«DEFINE Interface FOR Class»
	«FILE this.iffqn().toPath()+".java"»
		package «this.packageName()»;
		public interface «this.name» 
		«IF this.superClass.size > 0»
			extends «FOREACH this.superClass.iffqn() AS parent SEPARATOR ", "»«parent»«ENDFOREACH»
		«ENDIF»
		{
			/* Getter and Setter for Properties with cardinality 0..1 or 1 which are not a composition */
			«EXPAND BasicDecl FOREACH attribute.select(p|!p.isMultivalued() && p.aggregation.toString() != "composite") SEPARATOR ";"»
			
			/* Getter and Setter for Properties with cardinality 0..1 or 1 which are a composition */
			«EXPAND BasicCompositeDecl FOREACH attribute.select(p|!p.isMultivalued() && p.aggregation.toString() == "composite") SEPARATOR ";"»
			
			/* Getter and Setter for Properties with cardinality 0..* which are not a composition */
			«EXPAND MultivaluedDecl FOREACH attribute.select(p|p.isMultivalued() && p.aggregation.toString() != "composite") SEPARATOR ";"»
			
			/* Getter and Setter for Properties with cardinality 0..* which are a composition */
			«EXPAND MultivaluedCompositeDecl FOREACH attribute.select(p|p.isMultivalued() && p.aggregation.toString() == "composite") SEPARATOR ";"»
			
			/* Abstract Operations */
			«EXPAND OperationDecl FOREACH ownedOperation»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE MultivaluedDecl FOR Property»
	«EXPAND AdderDecl FOR this»;
	«EXPAND RemoverDecl FOR this»;
	«EXPAND MultiGetterDecl FOR this»;
«ENDDEFINE»

«DEFINE AdderDecl FOR Property»
	void add«this.name.toFirstUpper()»(«((Classifier)this.type).iffqn()» value)
«ENDDEFINE»

«DEFINE AddCompositeDecl FOR Class»
	«this.iffqn()» add«this.name.toFirstUpper()»(
		«EXPAND VariableInitialiser FOREACH this.getAllAssociationProperties() SEPARATOR "," -»
		«IF this.getAllAssociationProperties().size > 0 && this.getAllPrimitiveProperties().size > 0»
			,
		«ENDIF»
		«EXPAND VariableInitialiser FOREACH this.getAllPrimitiveProperties() SEPARATOR "," -»
	)
«ENDDEFINE»

«DEFINE VariableInitialiser FOR Property»
   «this.type.typeDecl()» p_«this.name.toLowerCase()»
«ENDDEFINE»

«DEFINE RemoverDecl FOR Property»
	void remove«this.name.toFirstUpper()»(«this.type.typeDecl()» value)
«ENDDEFINE»

«DEFINE MultiGetterDecl FOR Property»
	java.util.List<«this.type.typeDecl().ensureObjectType()»> get«this.name.toFirstUpper()»s()
«ENDDEFINE»

«DEFINE BasicDecl FOR Property»
	«EXPAND GetterDecl FOR this»;
	«IF !Key.isInstance(this)»
		«EXPAND SetterDecl FOR this»;
	«ENDIF»
«ENDDEFINE»

«DEFINE GetterDecl FOR Property»
	«this.type.typeDecl()» get«this.name.toFirstUpper()»()
«ENDDEFINE»

«DEFINE SetterDecl FOR Property»
	void set«this.name.toFirstUpper()»(«this.type.typeDecl()» value)
«ENDDEFINE»

«DEFINE AbstractClass FOR Class»
	«FILE this.packageName().toPath()+"/base/Abstract"+this.name+".java"»
		package «this.packageName()».base;
		public abstract class Abstract«this.name»
		«IF this.superClass.size > 0»
			extends «this.superClass.get(0).abstractbasefqn()»
		«ENDIF»
		implements «this.typeDecl()»
		{
			«IF this.superClass.size > 0»
				public Abstract«this.name»(«this.packageName()».dao.IDAOFactory myFactory) {
					super(myFactory);
				}
			«ELSE»
				protected «this.packageName()».dao.IDAOFactory myDAOFactory = null;
				public Abstract«this.name»(«this.packageName()».dao.IDAOFactory myFactory) {
					this.myDAOFactory = myFactory;
				}
			«ENDIF»
			
			/* Getter and Setter for Properties with cardinality 0..1 or 1 which are not a composition */
			«EXPAND Basic FOREACH attribute.select(p|!p.isMultivalued() && p.aggregation.toString() != "composite") SEPARATOR ";"»
			
			/* Getter and Setter for Properties with cardinality 0..1 or 1 which are a composition */
			«EXPAND BasicComposite FOREACH attribute.select(p|!p.isMultivalued() && p.aggregation.toString() == "composite") SEPARATOR ";"»
			
			/* Getter and Setter for Properties with cardinality 0..* which are not a composition */
			«EXPAND Multivalued FOREACH attribute.select(p|p.isMultivalued() && p.aggregation.toString() != "composite") SEPARATOR ";"»
			
			/* Getter and Setter for Properties with cardinality 0..* which are a composition */
			«EXPAND MultivaluedComposite FOREACH attribute.select(p|p.isMultivalued() && p.aggregation.toString() == "composite") SEPARATOR ";"»
			
			/* Abstract Operations */
			«EXPAND Operation FOREACH ownedOperation»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE OperationDecl FOR Operation»
    «IF this.hasReturnParameter()»
    	«IF this.returnParameter().isMultivalued()»
    		java.util.Collection<«this.returnParameter().type.typeDecl()»>
    	«ELSE»
    		«this.returnParameter().type.typeDecl()»
    	«ENDIF»
    «ELSE»
    	void
    «ENDIF»	
	«this.name» (
		«FOREACH this.inputParameter() AS p SEPARATOR ","»
			«p.type.typeDecl()» «p.name»
		«ENDFOREACH»
	);
«ENDDEFINE»

«DEFINE Operation FOR Operation»
    public abstract
    «EXPAND OperationDecl FOR this»
«ENDDEFINE»

«DEFINE BasicComposite FOR Property»
«ENDDEFINE»

«DEFINE BasicCompositeDecl FOR Property»
«ENDDEFINE»

«DEFINE MultivaluedCompositeDecl FOR Property»
	«FOREACH this.type.getAllSubtypes().select(c|!c.isAbstract) AS subtype»
		«EXPAND AddCompositeDecl FOR subtype»;
	«ENDFOREACH»
	«EXPAND AdderDecl FOR this»;
	«EXPAND MultiGetterDecl FOR this»;
«ENDDEFINE»

«DEFINE MultivaluedComposite FOR Property»
	private java.util.List<«this.type.typeDecl().ensureObjectType()»> m_«this.name»s 
	   = new java.util.ArrayList<«this.type.typeDecl().ensureObjectType()»>(10000);
	«FOREACH this.type.getAllSubtypes().select(c|!c.isAbstract) AS subtype»
		public «EXPAND AddCompositeDecl FOR subtype» {
			«subtype.typeDecl()» result = 
				myDAOFactory.create«subtype.name.toFirstUpper()»DAO().add«subtype.name.toFirstUpper()»(


			«FOREACH subtype.getAllAssociationProperties() AS p SEPARATOR ","-»
				p_«p.name.toLowerCase()»
			«ENDFOREACH»
			«IF subtype.getAllAssociationProperties().size > 0 && subtype.getAllPrimitiveProperties().size > 0»
				,
			«ENDIF»
			«FOREACH subtype.getAllPrimitiveProperties() AS p SEPARATOR ","-»
				p_«p.name.toLowerCase()»
			«ENDFOREACH»);

			m_«this.name»s.add(result);
			return result;
		}
	«ENDFOREACH»
	public «EXPAND AdderDecl FOR this» {
		this.m_«this.name»s.add(value);
	}
	public «EXPAND MultiGetterDecl FOR this» {
		return this.m_«this.name»s;
	}
«ENDDEFINE»

«DEFINE Multivalued FOR Property»
	private java.util.List<«this.type.typeDecl().ensureObjectType()»> m_«this.name»s 
	   = new java.util.ArrayList<«this.type.typeDecl().ensureObjectType()»>(10000);
	public «EXPAND AdderDecl FOR this» {
		m_«this.name»s.add(value);
	}
	public «EXPAND RemoverDecl FOR this» {
		m_«this.name»s.remove(value);
	}
	public «EXPAND MultiGetterDecl FOR this» {
		return this.m_«this.name»s;
	}
«ENDDEFINE»

«DEFINE Basic FOR Property»
	private «this.type.typeDecl()» m_«this.name»;
	public «EXPAND GetterDecl FOR this» {
		return m_«this.name»;
	}
	public «EXPAND SetterDecl FOR this» {
		this.m_«this.name» = value;
	}
«ENDDEFINE»

«DEFINE Implementation FOR Class»
	«FILE this.implfqn().toPath()+".java" MAN_SRC»
		package «this.packageName()».impl;
		
	    public class «this.name»Impl extends «this.abstractbasefqn()» {
	    	public «this.name»Impl(de.uka.ipd.sdq.sensorframework.entities.dao.IDAOFactory myFactory) {
				super(myFactory);
				// TODO Auto-generated constructor stub
			}
	    }
	«ENDFILE»
«ENDDEFINE»