import uml;
import Persistence;

List[Property] getAllAssociationProperties(Class c):
	c.attribute.select(p|!PrimitiveType.isInstance(p.type) && !p.isMultivalued() && p.aggregation.toString() != "composite").
		union(c.superClass.getAllAssociationProperties());
 
List[Property] getAllPrimitiveProperties(Class c):
	c.attribute.select(p|PrimitiveType.isInstance(p.type) && !Key.isInstance(p) && !p.isMultivalued()).
		union(c.superClass.getAllPrimitiveProperties());
	
List[Property] getAllProperties(Class c):
	c.getAllAssociationProperties().union(c.getAllPrimitiveProperties());
		
List[Class] getAllSubtypes(Type c):
	{c}.union(c.getModel().eAllContents.typeSelect(Class).select(oc|oc.superClass.contains(c)));
	
hasReturnParameter(Operation o):
	!o.ownedParameter.select(p|p.direction.toString() == "return").isEmpty;

returnParameter(Operation o):
	o.ownedParameter.select(p|p.direction.toString() == "return").get(0);

inputParameter(Operation o):
	o.ownedParameter.select(p|p.direction.toString() != "return");